#include "Draw.h"
#include "SoundManager.h"
void DrawScreen()
{
	FixConsoleWindow();
	DrawBound();
	DrawLogoCaro(45, 5);
	SetColor(0, 15);
	Draw_Guide(50, 35, text.moveUpText + ", " + text.moveDownText + ", " + text.selectText);
	DrawDragonWomen(103, 17);
	DrawDragonMen(13, 17);
}
void SSetColor(int mauBg, int mauchu) {
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hStdOut, (mauBg << 4) | mauchu);
}

void DrawBoard(int pSize)
{
	SetConsoleOutputCP(CP_ACP);
	//ngang
	for (int ix = LEFT + 1; ix <= LEFT + pSize * 4 - 1; ix += 4)
	{
		for (int iy = TOP; iy <= TOP + pSize * 2; iy += 2)
		{
			GotoXY(ix, iy);
			cout << char(205);
			GotoXY(ix + 1, iy);
			cout << char(205);
			GotoXY(ix + 2, iy);
			cout << char(205);
		}
	}
	//doc
	for (int iy = TOP + 1; iy <= TOP + pSize * 2 - 1; iy += 2)
	{
		for (int ix = LEFT; ix <= LEFT + pSize * 4; ix += 4)
		{
			GotoXY(ix, iy);
			cout << char(186);
		}
	}
	//cong
	for (int ix = LEFT + 4; ix <= LEFT + pSize * 4; ix += 4)
	{
		for (int iy = TOP + 2; iy <= TOP + pSize * 2 - 2; iy += 2)
		{
			GotoXY(ix, iy);
			cout << char(206);
		}
	}
	//cong tren/duoi
	for (int ix = LEFT + 4; ix <= LEFT + pSize * 4; ix += 4)
	{
		GotoXY(ix, TOP);
		cout << char(203);
		GotoXY(ix, TOP + pSize * 2);
		cout << char(202);
	}
	//cong trai/phai
	for (int iy = TOP + 2; iy <= TOP + pSize * 2; iy += 2)
	{
		GotoXY(LEFT, iy);
		cout << char(204);
		GotoXY(LEFT + pSize * 4, iy);
		cout << char(185);
	}
	GotoXY(LEFT, TOP); cout << char(201);//goc tren tai
	GotoXY(pSize * 4 + LEFT, TOP); cout << char(187); //goc tren phai
	GotoXY(LEFT, TOP + pSize * 2); cout << char(200); //goc duoi trai
	GotoXY(LEFT + pSize * 4, TOP + pSize * 2); cout << char(188); //goc duoi phai
}
void DrawBound()
{
	int x0 = 1;
	int y0 = 1;
	int w = 140;
	int h = 38;

	SetConsoleOutputCP(CP_ACP);
	//ngang
	for (int ix = x0 + 1; ix < x0 + w; ix++)
	{
		GotoXY(ix, y0);
		cout << char(205);
		GotoXY(ix, y0 + h);
		cout << char(205);
	}
	//doc
	for (int iy = x0 + 1; iy < y0 + h; iy++)
	{
		GotoXY(x0, iy);
		cout << char(186);
		GotoXY(x0 + w, iy);
		cout << char(186);
	}

	GotoXY(x0, y0); cout << char(201);
	GotoXY(x0 + w, y0); cout << char(187);
	GotoXY(x0, y0 + h); cout << char(200);
	GotoXY(x0 + w, y0 + h); cout << char(188);
}
void DrawGuideGame(int x, int y)
{
	Draw_Guide(x, y, text.moveLeftText);
	Draw_Guide(x, y + 1, text.moveRightText);
	Draw_Guide(x, y + 2, text.moveUpText);
	Draw_Guide(x, y + 3, text.moveDownText);
	Draw_Guide(x + 30, y, text.selectText);
	Draw_Guide(x + 30, y + 1, text.exitText);
	Draw_Guide(x + 30, y + 2, text.saveText);
}
void Draw_Guide(int x, int y, string nd)
{
	GotoXY(x, y); cout << nd;
}


void Draw_infor1(int x, int y, int w, int h)
{
	if (_TURN) {
		GotoXY(x + 2, y + 1);
		SetColor(15, 0);
		cout << "Player 1 (X): ";
		GotoXY(x + 2 + 35, y + 1);
		SetColor(1, 15);
		cout << "Player 2 (O): ";
	}
	else
	{
		GotoXY(x + 2, y + 1);
		SetColor(4, 15);
		cout << "Player 1 (X): ";
		GotoXY(x + 2 + 35, y + 1);
		SetColor(15, 0);
		cout << "Player 2 (O): ";
		SetColor(1, 15);
	}
	GotoXY(x + 2  + 15, y + 1);
	SetColor(4, 15);
	cout << Player_1.Name;
	Box(x, y, w, h + 3);
	string s = "";
	s = "Moves: " + to_string(Player_1.Moves);
	GotoXY(x + 2, y + 2);
	cout << s;
	s = "Wins: " + to_string(Player_1.Wins);
	GotoXY(x + 2, y + 3);
	cout << s;
	SetColor(0, 15);
	DrawChooseAvatar(Player_1, x, y);

	string s2 = "";
	SetColor(1, 15);
	Box(x + 35, y, w, h + 3);
	GotoXY(x + 2 + 35 + 15, y + 1);
	cout << Player_2.Name;

	s2 = "Moves: " + to_string(Player_2.Moves);
	GotoXY(x + 2 + 35, y + 2);
	cout << s2;
	s2 = "Wins: " + to_string(Player_2.Wins);
	GotoXY(x + 2 + 35, y + 3);
	cout << s2;
	SetColor(0, 15);
	DrawChooseAvatar(Player_2, x + 35, y);

	
}
void Draw_infor(int x, int y, int w, int h)
{
		if (!_TURN) {
			GotoXY(x + 2, y + 1);
			SetColor(15, 0);
			cout << "Player 1 (X): ";
			GotoXY(x + 2 + 35, y + 1);
			SetColor(1, 15);
			cout << "Player 2 (O): ";
		}
		else
		{
			GotoXY(x + 2, y + 1);
			SetColor(4, 15);
			cout << "Player 1 (X): ";


			GotoXY(x + 2 + 35, y + 1);
			SetColor(15, 0);
			cout << "Player 2 (O): ";
			SetColor(1, 15);
		}
		GotoXY(x + 2 + 15, y + 1);
		SetColor(4, 15);
		cout << Player_1.Name;
		Box(x, y, w, h + 3);
		string s = "";
		s = "Moves: " + to_string(Player_1.Moves);
		GotoXY(x + 2, y + 2);
		cout << s;
		s = "Wins: " + to_string(Player_1.Wins);
		GotoXY(x + 2, y + 3);
		cout << s;
		SetColor(0, 15);

		DrawChooseAvatar(Player_1, x, y);
		string s2 = "";
		SetColor(1, 15);
		Box(x + 35, y, w, h + 3);
		GotoXY(x + 2 + 35 + 15, y + 1);
		cout << Player_2.Name;
		s2 = "Moves: " + to_string(Player_2.Moves);
		GotoXY(x + 2 + 35, y + 2);
		cout << s2;
		s2 = "Wins: " + to_string(Player_2.Wins);
		GotoXY(x + 2 + 35, y + 3);
		cout << s2;
		SetColor(0, 15);
		DrawChooseAvatar(Player_2, x + 35, y);
	
}
void DrawRedDragon(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[22][22] = {
	   {15, 15, 15, 15, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 4, 0, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 4, 4, 0, 15, 15, 0, 4, 4, 0, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 0, 4, 4, 4, 0, 15, 15, 0, 4, 4, 4, 0, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 0, 4, 4, 4, 0, 15, 15, 15, 0, 4, 4, 0, 0, 0, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 6, 4, 0, 15, 15, 15, 0, 0, 4, 4, 0, 4, 0, 15, 15, 15},
	   {15, 15, 15, 0, 0, 4, 6, 0, 15, 15, 15, 0, 4, 4, 4, 4, 4, 4, 4, 0, 15, 15},
	   {15, 15, 0, 0, 4, 4, 0, 15, 15, 15, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 15, 15},
	   {15, 0, 4, 4, 4, 0, 15, 15, 15, 15, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 15},
	   {0, 4, 4, 4, 0, 15, 15, 15, 15, 0, 0, 4, 4, 4, 15, 0, 4, 4, 4, 4, 4, 0},
	   {0, 4, 4, 4, 0, 15, 15, 0, 0, 4, 4, 0, 4, 0, 15, 0, 0, 4, 4, 4, 4, 0},
	   {0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 15},
	   {0, 0, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 15, 15},
	   {15, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 14, 14, 0, 0, 0, 0, 4, 4, 0, 15},
	   {15, 15, 0, 4, 0, 4, 4, 0, 4, 15, 0, 14, 14, 14, 0, 15, 15, 0, 4, 4, 15, 0},
	   {15, 15, 15, 0, 0, 4, 4, 0, 4, 4, 4, 0, 14, 0, 15, 15, 15, 15, 0, 15, 4, 0},
	   {15, 15, 15, 15, 0, 4, 4, 4, 0, 4, 15, 0, 14, 0, 0, 15, 15, 15, 15, 0, 0, 15},
	   {15, 15, 15, 15, 0, 0, 4, 4, 4, 0, 0, 14, 0, 4, 15, 0, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 0, 4, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 15, 4, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 22; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 22; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawPikachu(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[20][21] = {
		 {15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15},
		 {15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 0, 6, 6, 0, 15},
		 {15, 15, 15, 15, 0, 14, 14, 0, 15, 15, 15, 15, 0, 0, 0, 0, 6, 6, 6, 6, 0},
		 {15, 15, 15, 15, 0, 14, 14, 0, 15, 15, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0},
		 {15, 15, 15, 0, 0, 14, 0, 15, 15, 0, 14, 14, 14, 0, 6, 6, 6, 6, 6, 0, 15},
		 {15, 15, 0, 14, 14, 14, 14, 0, 0, 14, 14, 14, 0, 6, 6, 6, 6, 6, 0, 15, 15},
		 {15, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 6, 6, 6, 6, 6, 0, 15, 15, 15},
		 {15, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 6, 6, 6, 0, 15, 15, 15, 15},
		 {0, 14, 14, 14, 14, 14, 15, 0, 14, 14, 14, 0, 15, 0, 6, 6, 6, 0, 15, 15, 15},
		 {0, 14, 0, 14, 14, 14, 0, 0, 14, 14, 14, 14, 0, 15, 0, 6, 6, 0, 15, 15, 15},
		 {15, 0, 14, 14, 14, 14, 14, 4, 4, 14, 14, 14, 14, 0, 6, 6, 0, 15, 15, 15, 15},
		 {0, 14, 0, 14, 14, 14, 14, 4, 4, 14, 14, 14, 14, 0, 6, 0, 15, 15, 15, 15, 15},
		 {15, 0, 0, 0, 14, 14, 14, 14, 0, 14, 14, 14, 14, 14, 0, 6, 0, 15, 15, 15, 15},
		 {15, 15, 15, 15, 0, 14, 14, 0, 14, 14, 0, 14, 14, 14, 0, 0, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 0, 14, 14, 14, 0, 0, 14, 14, 14, 14, 0, 15, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 0, 0, 14, 14, 14, 14, 14, 14, 14, 0, 0, 15, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 0, 14, 0, 0, 0, 14, 14, 14, 14, 0, 15, 15, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 15, 0, 0, 15, 15, 0, 0, 14, 0, 15, 15, 15, 15, 15, 15, 15, 15},
		 {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 20; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 21; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawBlueBoom(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[20][19] = {
	{15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 0, 3, 3, 0, 0, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 0, 3, 3, 3, 0, 3, 3, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 0, 0, 3, 3, 3, 0, 3, 3, 3, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 15, 15, 15, 15, 15},
	{15, 15, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 0, 15, 15, 15, 15, 15},
	{15, 15, 0, 15, 15, 0, 3, 0, 15, 15, 15, 0, 3, 3, 0, 15, 15, 15, 15},
	{15, 0, 15, 0, 15, 15, 0, 15, 0, 15, 14, 0, 3, 3, 0, 15, 15, 15, 15},
	{15, 0, 14, 14, 0, 0, 0, 0, 14, 14, 14, 0, 3, 3, 3, 0, 15, 15, 15},
	{15, 0, 12, 0, 6, 6, 6, 6, 0, 12, 12, 12, 3, 3, 3, 0, 15, 15, 15},
	{0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 12, 3, 3, 3, 3, 0, 15, 15, 15},
	{15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{15, 0, 3, 0, 6, 6, 6, 6, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 15},
	{15, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0},
	{15, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 15, 15},
	{15, 15, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 15, 0, 0, 15},
	{15, 15, 15, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 0, 0, 3, 3, 3, 3, 3, 0, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 20; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 19; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawRedBoom(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[20][20] = {
	  {15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 15, 0, 0, 12, 12, 12, 12, 0, 15, 15, 15, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 0, 12, 12, 0, 12, 12, 12, 12, 0, 15, 15, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 15, 0, 0, 12, 12, 12, 0, 0, 12, 12, 0, 15, 15, 15, 15},
	  {15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15},
	  {15, 15, 15, 15, 0, 12, 12, 0, 0, 0, 0, 12, 12, 12, 12, 0, 0, 0, 15, 15},
	  {15, 15, 15, 15, 0, 12, 12, 0, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 0, 15},
	  {15, 0, 15, 0, 12, 12, 12, 12, 0, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15},
	  {0, 15, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 0, 15, 0, 0, 15, 0, 0, 0},
	  {0, 0, 0, 0, 12, 12, 12, 12, 12, 0, 15, 15, 15, 0, 0, 15, 15, 0, 12, 0},
	  {15, 0, 0, 0, 12, 12, 12, 12, 12, 12, 0, 0, 0, 6, 6, 0, 0, 12, 12, 0},
	  {0, 15, 0, 0, 12, 12, 12, 12, 12, 12, 12, 0, 6, 6, 6, 6, 6, 0, 12, 0},
	  {15, 15, 15, 0, 12, 12, 12, 12, 12, 14, 14, 0, 6, 0, 6, 6, 6, 6, 0, 0},
	  {15, 15, 15, 15, 0, 12, 12, 12, 14, 14, 14, 14, 0, 6, 0, 0, 0, 0, 12, 0},
	  {15, 15, 15, 15, 15, 0, 12, 12, 14, 14, 14, 14, 14, 0, 0, 14, 14, 12, 0, 15},
	  {15, 15, 15, 15, 15, 15, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 15, 15},
	  {15, 15, 15, 15, 15, 15, 15, 0, 0, 14, 14, 14, 14, 14, 14, 14, 0, 15, 15, 15},
	  {15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 20; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 20; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawBlackBoom(int x, int y)
{
	int BlackBoom[20][19] = {
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 0, 6, 6, 0, 15, 15, 15, 15, 15, 15, 15},
	{15, 4, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 4, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 4, 15, 15},
	{15, 15, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 15, 15, 15},
	{15, 15, 0, 0, 8, 8, 4, 0, 0, 0, 0, 0, 4, 8, 8, 0, 15, 15, 15},
	{15, 0, 0, 8, 15, 0, 8, 4, 0, 0, 0, 4, 8, 15, 0, 8, 0, 15, 15},
	{15, 0, 8, 8, 15, 15, 8, 0, 0, 0, 0, 0, 8, 15, 15, 8, 0, 15, 15},
	{0, 0, 8, 8, 8, 8, 8, 0, 0, 6, 6, 6, 6, 8, 8, 0, 0, 0, 15},
	{0, 0, 0, 8, 8, 8, 0, 0, 6, 0, 0, 0, 6, 6, 0, 0, 0, 0, 15},
	{0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 15},
	{15, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 15, 15},
	{15, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 15, 15},
	{15, 15, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 15, 15, 15},
	{15,15, 15, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 15, 15, 15, 15},
	{15,15, 15, 15, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 15, 15, 15, 15, 15},
	{15,15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15}
	};
	SetConsoleOutputCP(CP_UTF8);

	for (int i = 0; i < 20; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 19; x++)
		{

			SSetColor(BlackBoom[i][x], BlackBoom[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawYellowBoom(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[22][22] = {
	 {15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 0, 0, 0, 14, 14, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 0, 0, 0, 0, 14, 14, 14, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 0, 14, 14, 14, 14, 14, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 0, 14, 14, 14, 14, 14, 14, 0, 15, 15, 15, 15, 15, 15, 15},
	 {0, 15, 15, 15, 0, 15, 0, 14, 14, 14, 14, 14, 14, 14, 14, 0, 15, 15, 0, 15, 15, 15},
	 {0, 0, 15, 0, 0, 15, 0, 0, 0, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 15, 15, 15},
	 {0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 14, 14, 14, 0, 0, 0, 0, 15, 15, 15, 15},
	 {0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 14, 0, 0, 0, 0, 14, 0, 15, 15, 15},
	 {15, 15, 0, 0, 0, 14, 14, 0, 15, 3, 0, 14, 14, 14, 0, 15, 3, 0, 0, 15, 15, 15},
	 {0, 0, 0, 0, 0, 14, 14, 0, 3, 3, 0, 14, 0, 0, 0, 3, 3, 0, 14, 0, 15, 15},
	 {15, 0, 0, 0, 14, 14, 14, 14, 0, 0, 14, 0, 6, 6, 6, 0, 0, 14, 14, 0, 15, 15},
	 {0, 15, 15, 0, 14, 14, 14, 14, 14, 14, 0, 6, 6, 6, 6, 6, 6, 0, 14, 14, 0, 15},
	 {15, 15, 0, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 15},
	 {15, 15, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 6, 6, 0, 15, 14, 14, 14, 14, 0},
	 {15, 15, 0, 0, 14, 14, 14, 14, 14, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 0, 0},
	 {15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 15},
	 {15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 22; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 22; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawGreenBoom(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[22][22] = {
	 {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 0, 0, 0, 15, 0, 0, 2, 2, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 15, 0, 0, 0, 0, 0, 15, 15, 15},
	 {15, 15, 15, 15, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0, 0, 15},
	 {15, 15, 15, 0, 2, 15, 0, 0, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0},
	 {15, 15, 0, 2, 15, 15, 15, 0, 0, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0},
	 {15, 0, 2, 2, 15, 15, 0, 15, 2, 6, 6, 6, 6, 6, 6, 0, 15, 15, 15, 15, 15, 15},
	 {0, 2, 2, 2, 2, 15, 15, 2, 6, 6, 6, 6, 6, 0, 2, 2, 0, 15, 15, 15, 15, 15},
	 {0, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 0, 0, 0, 0, 2, 2, 0, 15, 15, 15, 15},
	 {0, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 15, 15, 15},
	 {0, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 15, 15},
	 {15, 0, 2, 2, 2, 2, 2, 2, 15, 15, 15, 15, 15, 6, 6, 6, 6, 6, 6, 6, 0, 15},
	 {15, 0, 2, 2, 2, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 6, 0, 0, 6, 6, 0},
	 {15, 15, 0, 2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 0, 0, 15},
	 {15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	 {15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 22; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 22; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawPig(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[22][22] = {
	{15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 10, 10, 10, 0, 15, 15, 15, 15, 0, 10, 10, 10, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 10, 0, 10, 0, 15, 15, 15, 15, 0, 10, 0, 10, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 10, 10, 10, 0, 0, 0, 0, 0, 0, 10, 10, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 15, 15, 15, 15},
	{15, 15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 15, 15, 15},
	{15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 15, 15},
	{15, 0, 10, 10, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 10, 10, 0, 15},
	{15, 0, 10, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 10, 0, 15},
	{0, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 0},
	{0, 10, 10, 0, 0, 0, 10, 10, 2, 10, 10, 10, 10, 10, 10, 2, 10, 10, 0, 0, 0, 0},
	{0, 10, 0, 15, 15, 15, 0, 2, 10, 0, 0, 10, 10, 10, 10, 10, 2, 0, 15, 15, 15, 0},
	{0, 10, 0, 0, 15, 15, 0, 2, 10, 0, 0, 10, 10, 0, 0, 10, 2, 0, 15, 15, 0, 0},
	{0, 10, 0, 15, 15, 15, 0, 2, 10, 10, 10, 10, 10, 10, 10, 10, 2, 0, 15, 15, 15, 0},
	{0, 10, 10, 0, 0, 0, 10, 10, 2, 10, 10, 10, 10, 10, 10, 10, 2, 10, 0, 0, 0, 0},
	{15, 0, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 0},
	{15, 0, 10, 10, 10, 10, 10, 10, 10, 2, 10, 10, 10, 10, 10, 2, 10, 10, 10, 10, 0, 15},
	{15, 15, 0, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2, 10, 10, 10, 10, 0, 15, 15},
	{15, 15, 15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 15, 15, 15},
	{15, 15, 15, 15, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 22; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 22; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawDragonWomen(int x, int y)
{
	int mang[30][27] = {
	{15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 0, 15, 0, 3, 3, 0, 3, 3, 0, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 0, 3, 15, 15, 15, 15, 3, 1, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 0, 15, 0, 15, 0, 15, 15, 3, 0, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 0, 15, 0, 15, 0, 15, 15, 3, 0, 12, 12, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 0, 0, 15, 0, 15, 0, 15, 15, 3, 0, 0, 4, 4, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 0, 3, 3, 3, 1, 1, 15, 15, 15, 3, 3, 3, 1, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 0, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 0, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{0, 3, 0, 3, 0, 3, 3, 3, 3, 1, 3, 15, 15, 15, 3, 1, 0, 4, 12, 0, 15, 15, 15, 15, 15, 15, 15},
	{0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 15, 15, 15, 15, 15, 1, 0, 4, 4, 0, 15, 15, 15, 15, 15, 15, 15},
	{0, 3, 3, 3, 3, 3, 3, 3, 3, 1, 15, 15, 15, 15, 15, 1, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 15, 0, 15, 15, 15, 1, 0, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	{0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 15, 15, 15, 1, 0, 4, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 0, 1, 3, 3, 3, 3, 1, 0, 15, 15, 15, 15, 1, 3, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	{15, 15, 0, 1, 1, 1, 1, 0, 15, 15, 15, 15, 15, 3, 0, 4, 0, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 0, 0, 0, 0, 15, 15, 15, 15, 15, 151, 3, 3, 0, 0, 0, 4, 4, 12, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 0, 0, 15, 15, 15, 3, 3, 3, 0, 0, 15, 4, 12, 12, 0, 15, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 0, 3, 0, 15, 15, 15, 1, 3, 3, 3, 0, 0, 15, 4, 12, 0, 15, 15, 0, 0, 15},
	{15, 15, 15, 15, 15, 0, 3, 1, 0, 0, 15, 15, 15, 0, 1, 3, 3, 3, 1, 0, 15, 15, 0, 0, 3, 3, 0},
	{15, 15, 15, 15, 15, 0, 3, 0, 0, 0, 15, 15, 15, 15, 3, 3, 3, 3, 3, 1, 0, 0, 3, 3, 3, 0, 15},
	{15, 15, 15, 15, 15, 0, 3, 1, 0, 0, 15, 15, 15, 0, 1, 15, 15, 3, 3, 3, 3, 0, 3, 1, 0, 0, 15},
	{15, 15, 15, 15, 15, 0, 3, 3, 1, 0, 15, 15, 1, 0, 0, 15, 15, 3, 3, 3, 3, 0, 1, 15, 0, 15, 15},
	{15, 15, 15, 15, 15, 0, 3, 3, 1, 0, 0, 15, 15, 0, 1, 3, 3, 3, 3, 3, 1, 0, 15, 0, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 0, 15, 15, 15, 0, 1, 3, 3, 3, 1, 0, 15, 0, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 12, 12, 4, 0, 0, 0, 12, 12, 12, 12, 4, 0, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 12, 12, 4, 0, 0, 0, 12, 12, 12, 12, 4, 0, 15, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 0, 12, 15, 12, 12, 4, 4, 0, 12, 15, 12, 12, 12, 12, 4, 0, 15, 15, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 0, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	};

	SetConsoleOutputCP(CP_UTF8);

	for (int i = 0; i < 30; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 27; x++)
		{

			SSetColor(mang[i][x], mang[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void DrawDragonMen(int x, int y)
{

	int mang[30][27] = {
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 15, 0, 0, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 10, 10, 0, 10, 10, 0, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 2, 10, 15, 15, 15, 15, 10, 0, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 10, 15, 15, 0, 15, 0, 15, 0, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 0, 10, 15, 15, 0, 15, 0, 15, 0, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 4, 4, 0, 0, 10, 15, 15, 0, 15, 0, 15, 0, 0, 0, 15, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 2, 10, 10, 10, 15, 15, 15, 2, 2, 10, 10, 10, 0, 15, 15},
	   {15, 15, 15, 15, 15, 15, 15, 15, 0, 12, 0, 2, 10, 10, 10, 10, 10, 10, 2, 10, 10, 10, 10, 10, 10, 0, 15},
	   {15, 15, 15, 15, 15, 15, 15, 0, 12, 4, 0, 2, 10, 15, 15, 15, 10, 2, 10, 10, 10, 10, 0, 10, 0, 10, 0},
	   {15, 15, 15, 15, 15, 15, 15, 0, 4, 4, 0, 2, 15, 15, 15, 15, 15, 2, 10, 10, 10, 10, 10, 10, 10, 10, 0},
	   {15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 2, 15, 15, 15, 15, 15, 2, 10, 10, 10, 10, 10, 10, 10, 10, 0},
	   {15, 15, 15, 15, 15, 15, 15, 15, 0, 12, 0, 2, 15, 15, 15, 0, 15, 0, 10, 10, 10, 10, 10, 10, 10, 10, 0},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 4, 0, 2, 15, 15, 15, 0, 0, 2, 10, 10, 10, 10, 10, 10, 2, 0},
	   {15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 10, 2, 15, 15, 15, 15, 0, 2, 10, 10, 10, 10, 2, 0, 15},
	   {15, 15, 15, 15, 15, 15, 0, 0, 0, 15, 0, 4, 0, 10, 15, 15, 15, 15, 15, 0, 2, 2, 2, 2, 0, 15, 15},
	   {15, 15, 15, 15, 15, 0, 12, 4, 4, 0, 0, 0, 10, 10, 10, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15},
	   {15, 15, 15, 15, 0, 12, 12, 4, 15, 0, 0, 10, 10, 10, 15, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15},
	   {15, 0, 0, 15, 0, 12, 4, 15, 0, 0, 10, 10, 10, 2, 15, 15, 15, 0, 2, 10, 0, 15, 15, 15, 15, 15, 15},
	   {0, 10, 10, 0, 0, 15, 15, 0, 2, 10, 10, 10, 2, 0, 15, 15, 15, 0, 0, 2, 10, 0, 15, 15, 15, 15, 15},
	   {15, 0, 10, 10, 10, 0, 0, 2, 10, 10, 10, 10, 10, 15, 15, 15, 15, 0, 0, 0, 10, 0, 15, 15, 15, 15, 15},
	   {15, 0, 0, 2, 10, 0, 10, 10, 10, 10, 15, 15, 2, 0, 15, 15, 15, 0, 0, 2, 10, 0, 15, 15, 15, 15, 15},
	   {15, 15, 0, 15, 2, 0, 10, 10, 10, 10, 15, 15, 0, 0, 15, 15, 15, 0, 2, 10, 10, 0, 15, 15, 15, 15, 15},
	   {15, 15, 15, 0, 15, 0, 2, 10, 10, 10, 10, 10, 2, 0, 15, 15, 0, 0, 2, 10, 10, 0, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 0, 15, 0, 2, 10, 10, 10, 2, 0, 15, 15, 15, 0, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 0, 4, 12, 12, 12, 12, 0, 15, 15, 0, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 15, 0, 4, 12, 12, 12, 12, 0, 0, 0, 4, 12, 12, 0, 0, 15, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 0, 4, 12, 12, 12, 12, 15, 12, 0, 4, 4, 12, 12, 15, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15},
	   {15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 0, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);

	for (int i = 0; i < 30; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 27; x++)
		{

			SSetColor(mang[i][x], mang[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}

void DrawLogoCaro(int x, int y) {

	// Ma trận 16x54 với các giá trị từ bảng số bạn cung cấp
	int matrix[16][54] = {
	{15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15},
	{0, 0, 15, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 0, 15, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 0, 15, 12, 12, 12, 12, 12, 12, 12, 0, 0},
	{0, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 4, 4, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 0, 4, 4, 4, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 0, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 15, 15, 15, 15, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 12, 12, 12, 12, 0, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 0, 0, 0, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 12, 12,12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 0, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 4, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 4, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0},
	{0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 12, 12, 0, 15, 15, 0, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 0, 15, 15, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0},
	{15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15}
	};


	// Duyệt qua ma trận và in màu tương ứng
	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 16; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 54; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);

}
void DrawDRAW(int x, int y) {
	int matrix[14][52] = {
{0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0},
{0, 15, 15, 12, 12, 12, 12, 0, 0, 15, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 0, 15, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 15, 15, 12, 12, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 0},
{0, 15, 15, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 15, 15, 12, 4, 12, 12, 12, 12, 0, 15, 15, 0, 15, 15, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 15, 15, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 12, 12, 0},
{0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 12, 12, 0},
{0, 12, 12, 12, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 0, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 0, 4, 12, 12, 12, 0, 12, 12, 12, 12, 0, 12, 12, 12, 4, 0},
{0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 4, 12, 12, 12, 0, 12, 12, 12, 12, 0, 12, 12, 12, 4, 0},
{0, 12, 12, 12, 0, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 0, 12, 12, 12, 0, 12, 12, 12, 12, 0, 12, 12, 12, 0, 0},
{0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15},
{0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15, 0, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15},
{0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 15, 0, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 0, 15},
{0, 12, 12, 12, 12, 12, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 4, 4, 12, 12, 12, 0, 15, 15, 15, 0, 0, 12, 12, 12, 12, 4, 4, 12, 12, 12, 12, 0, 0, 15},
{0, 12, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 0, 12, 12, 12, 0, 4, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 15, 15, 0, 12, 12, 12, 4, 0, 0, 4, 12, 12, 12, 0, 15, 15},
{0, 12, 12, 12, 12, 12, 12, 0, 0, 15, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 0, 12, 12, 12, 0, 0, 12, 12, 12, 0, 15, 15, 15, 15, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0, 15, 15},
{0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, 0, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 14; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 52; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void drawSelectionBox(int x, int y, int color) {
	SetConsoleOutputCP(CP_UTF8);
	GotoXY(x - 3, y - 2);
	SSetColor(15, color); // Màu khung chọn
	cout << u8"╔══════════════════════════╗";
	GotoXY(x - 3, y + 11);
	cout << u8"╚══════════════════════════╝";
	for (int i = -1; i < 11; i++) {
		GotoXY(x - 3, y + i);
		cout << u8"║";
		GotoXY(x + 24, y + i);
		cout << u8"║";
	}
	SetConsoleOutputCP(437);
}
void clearSelectionBox(int x, int y) {
	GotoXY(x - 3, y - 2);
	cout << "                            ";
	GotoXY(x - 3, y + 11);
	cout << "                            ";
	for (int i = -1; i < 11; i++) {
		GotoXY(x - 3, y + i);
		cout << " ";
		GotoXY(x + 24, y + i);
		cout << " ";
	}
}
void ChooseAvatar() {
	system("cls");
	system("color f0");
	Draw_Guide(50, 37, text.moveUpText + ", " + text.moveDownText + ", " + text.selectText);
	ShowCur(false);
	DrawBound();
	int positions[8][2] = { {15, 8}, {45, 8}, {75, 8}, {105, 8},
							{15, 23}, {45, 23}, {75, 23}, {105, 23} };
	string labels[8] = {
		"Red", "Green", "Yellow", "Black",
		"Blue", "Pig", "Dragon", "Pikachu"
	};
	//Options Avatar
	DrawRedBoom(positions[0][0], positions[0][1]);
	DrawGreenBoom(positions[1][0], positions[1][1]);
	DrawYellowBoom(positions[2][0], positions[2][1]);
	DrawBlackBoom(positions[3][0], positions[3][1]);
	DrawBlueBoom(positions[4][0], positions[4][1]);
	DrawPig(positions[5][0], positions[5][1]);
	DrawRedDragon(positions[6][0], positions[6][1]);
	DrawPikachu(positions[7][0], positions[7][1]);
	//

	int currentPos = 0;
	int playerturn = 1;
	int count = 0;
	int sum = 0;
	int s = true;
	bool occupied[8] = { false };
	drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);

	while (s == true) {
		if (_kbhit) {
			char key = _getch();

			// Xóa khung chọn cũ
			clearSelectionBox(positions[currentPos][0], positions[currentPos][1]);

			// Cập nhật vị trí mới


			if (key == 'a') {
				playMoveSound();
				// Di chuyển sang trái
				if (currentPos == 4) currentPos = 3;  // Chuyển từ đầu dòng 2 (ô thứ 4) sang cuối dòng 1 (ô thứ 3)
				else if (currentPos == 0) currentPos = 7;  // Chuyển từ đầu dòng 1 (ô thứ 0) sang cuối dòng 2 (ô thứ 7)
				else currentPos--; // Di chuyển sang trái bình 
				drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);

			}
			else if (key == 's') {
				playMoveSound();
				// Di chuyển xuống
				if (currentPos >= 0 && currentPos <= 3) currentPos += 4;
				else if (currentPos >= 4 && currentPos <= 7) currentPos -= 4; // Chuyển xuống dòng 2
				// Chuyển xuống dòng 
				drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);

			}
			else if (key == 'w') {
				playMoveSound();
				// Di chuyển lên
				if (currentPos >= 4 && currentPos <= 7) currentPos -= 4;
				else if (currentPos >= 0 && currentPos <= 3) currentPos += 4;// Chuyển lên dòng 1
				drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);

			}
			else if (key == 'd') {
				playMoveSound();
				clearSelectionBox(positions[currentPos][0], positions[currentPos][1]);

				// Di chuyển sang phải
				if (currentPos == 7) currentPos = 0;
				else if (currentPos == 3) currentPos = 4;  // Chuyển từ cuối dòng 1 (ô thứ 3) sang đầu dòng 2 (ô thứ 4)
				// Chuyển từ cuối dòng 2 (ô thứ 7) sang đầu dòng 1 (ô thứ 0)
				else {
					currentPos++;
				} // Di chuyển sang phải bình thường
				drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);
			}
			else if (key == 13) {
				playSelectSound();
				if (!occupied[currentPos]) {
					occupied[currentPos] = true;
					GotoXY(positions[currentPos][0], positions[currentPos][1]);
					drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);
					cout << (playerturn == 1 ? "X" : "O");
					if (playerturn == 1) {
						Player_1.Character = labels[currentPos];
					}
					else if (playerturn == 2) {
						Player_2.Character = labels[currentPos];
					}
					count++;
					playerturn = (playerturn == 1) ? 2 : 1;
					GotoXY(60, 2);
					cout << "Chon thanh cong";

				}
		
			}

			drawSelectionBox(positions[currentPos][0], positions[currentPos][1], playerturn == 1 ? 12 : 1);
			if (count == 2) {
				drawSelectionBox(positions[currentPos][0], positions[currentPos][1], 1);
				Sleep(200);
				s = false;
				system("cls");
			}
		}

	}

}
void DrawChooseAvatar(const Player& Player, int x, int y){
	if (Player.Character == "Red") {
		DrawRedBoom(x + 4, y + 5);
	}
	else if(Player.Character == "Green") {
		DrawGreenBoom(x + 4, y + 5);
	}
	else if (Player.Character == "Yellow") {
		DrawYellowBoom(x + 4, y + 5);
	}
	else if (Player.Character == "Black") {
		DrawBlackBoom(x + 4, y + 5);
	}
	else if (Player.Character == "Blue") {
		DrawBlueBoom(x + 4, y + 5);
	}
	else if (Player.Character == "Pig") {
		DrawPig(x + 4, y + 5);
	}
	else if (Player.Character == "Dragon") {
		DrawRedDragon(x + 4, y + 5);
	}
	else if (Player.Character == "Pikachu") {
		DrawPikachu(x + 4, y + 5);
	}
}
void vechuwin(int x, int y) {
	vechuW(x, y);
	vechuI(x + 15, y);
	vechuN(x + 24, y);
}
void vechuW(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[12][14] = {
		{0, 0, 0, 0, 0, 15, 15, 15, 15, 0, 0, 0, 0, 0},
		{0, 15, 15, 12, 0, 15, 15, 15, 15, 0, 12, 15, 15, 0},
		{0, 15, 15, 12, 0, 0, 0, 0, 0, 0, 12, 15, 15, 0},
		{0, 12, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 12, 0},
		{0, 4, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 4, 0},
		{0, 0, 12, 12, 0, 12, 12, 12, 12, 0, 12, 12, 0, 0},
		{15, 0, 12, 12, 0, 12, 12, 12, 12, 0, 12, 12, 0, 15},
		{15, 0, 4, 12, 12, 12, 4, 4, 12, 12, 12, 4, 0, 15},
		{15, 0, 0, 12, 12, 4, 0, 0, 4, 12, 12, 0, 0, 15},
		{15, 15, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 15, 15},
		{15, 15, 0, 0, 0, 0, 15, 15, 0, 0, 0, 0, 15, 15},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 12; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 14; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void vechuI(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[12][7] = {
		{0, 0, 0, 0, 0, 0, 0},
		{0, 15, 15, 15, 15, 15, 0},
		{0, 4, 15, 15, 15, 4, 0},
		{0, 0, 12, 12, 12, 0, 0},
		{15, 0, 12, 12, 12, 0, 15},
		{15, 0, 12, 12, 12, 0, 15},
		{15, 0, 12, 12, 12, 0, 15},
		{0, 0, 12, 12, 12, 0, 0},
		{0, 12, 12, 12, 12, 12, 0},
		{0, 4, 4, 4, 4, 4, 0},
		{0, 0, 0, 0, 0, 0, 0},
		{15,15,15,15,15,15,15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 12; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 7; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void vechuN(int x, int y) {
	// Khai báo mảng 12x14 với các giá trị đã cho
	int matrix[12][10] = {
		 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		 {0, 15, 15, 12, 0, 0, 12, 12, 12, 0},
		 {0, 15, 15, 12, 0, 0, 12, 12, 12, 0},
		 {0, 12, 12, 12, 12, 0, 12, 12, 12, 0},
		 {0, 12, 12, 12, 12, 12, 12, 12, 12, 0},
		 {0, 12, 12, 12, 12, 12, 12, 12, 12, 0},
		 {0, 12, 12, 12, 4, 12, 12, 12, 12, 0},
		 {0, 12, 12, 12, 0, 4, 12, 12, 12, 0},
		 {0, 12, 12, 12, 0, 0, 12, 12, 12, 0},
		 {0, 4, 4, 4, 0, 0, 4, 4, 4, 0},
		 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		 {15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 12; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 10; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void vechuX(int x, int y) {
	// Khai báo ma trận 12x11
	int matrix[12][11] = {
		{0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0},
		{0, 15, 15, 12, 0, 15, 0, 12, 12, 12, 0},
		{0, 15, 15, 12, 0, 0, 0, 12, 12, 12, 0},
		{0, 4, 12, 12, 12, 0, 12, 12, 12, 4, 0},
		{0, 0, 4, 12, 12, 12, 12, 12, 4, 0, 0},
		{15, 0, 0, 4, 12, 12, 12, 4, 0, 0, 15},
		{0, 0, 12, 12, 12, 12, 12, 12, 12, 0, 0},
		{0, 12, 12, 12, 12, 0, 12, 12, 12, 12, 0},
		{0, 12, 12, 12, 0, 0, 0, 12, 12, 12, 0},
		{0, 4, 4, 4, 0, 15, 0, 4, 4, 4, 0},
		{0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15}
	};


	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 12; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 11; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void vechuO(int x, int y) {
	// Khai báo ma trận 12x11
	int matrix[12][9] = {
	{15, 0, 0, 0, 0, 0, 0, 0, 15},
	{0, 0, 15, 12, 12, 12, 12, 0, 0},
	{0, 15, 15, 12, 12, 12, 12, 12, 0},
	{0, 12, 12, 12, 4, 12, 12, 12, 0},
	{0, 12, 12, 12, 0, 12, 12, 12, 0},
	{0, 12, 12, 12, 0, 12, 12, 12, 0},
	{0, 12, 12, 12, 0, 12, 12, 12, 0},
	{0, 12, 12, 12, 12, 12, 12, 12, 0},
	{0, 4, 12, 12, 12, 12, 12, 4, 0},
	{0, 0, 4, 4, 4, 4, 4, 0, 0},
	{15, 0, 0, 0, 0, 0, 0, 0, 15},
	{15, 15, 15, 15, 15, 15, 15, 15, 15}
	};


	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 12; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 9; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}
void Xwin(int x, int y) {
	vechuX(x, y);
	vechuwin(x + 18, y);
	SetColor(0, 15);  // Reset màu s?c v? m?c ??nh
	SetConsoleOutputCP(437);
}
void Owin(int x, int y) {
	vechuO(x, y);
	vechuwin(x + 18, y);
	SetColor(0, 15);  // Reset màu s?c v? m?c ??nh
	SetConsoleOutputCP(437);
}
void bangtrang(int x, int y) {
	int matrix[14][60];
	for (int i = 0; i < 14; ++i) {
		for (int j = 0; j < 55; ++j) {
			matrix[i][j] = 15;
		}
	}

	SetConsoleOutputCP(CP_UTF8);
	for (int i = 0; i < 14; i = i + 2)
	{
		GotoXY(x, y + i / 2);
		for (int x = 0; x < 55; x++)
		{
			SSetColor(matrix[i][x], matrix[i + 1][x]);
			cout << u8"▄";
		}cout << endl;
	}
	SetConsoleOutputCP(437);
}

void nhapnhayO(int x, int y) {
	/*while (true) {

	}*/
	for (int i = 1; i < 11; i++) {
		Owin(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		bangtrang(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		//this_thread::sleep_for(chrono::milliseconds(500));
		Owin(x, y);
	}
}
void nhapnhayX(int x, int y) {
	/*while (true) {

	}*/
	for (int i = 1; i < 11; i++) {
		Xwin(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		bangtrang(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		//this_thread::sleep_for(chrono::milliseconds(500));
		Xwin(x, y);
	}
}
void nhapnhayDRAW(int x, int y) {
	for (int i = 1; i < 11; i++) {
		DrawDRAW(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		bangtrang(x, y);
		this_thread::sleep_for(chrono::milliseconds(300));
		//this_thread::sleep_for(chrono::milliseconds(500));
		DrawDRAW(x, y);
	}
}
void DrawBackground()
{
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                                                                                      \033[m";
	cout << "\033[48;5;117m                                                                              \033[48;5;255m  \033[48;5;153m  \033[48;5;117m    \033[48;5;153m  \033[48;5;255m    \033[48;5;153m  \033[48;5;117m                                        \033[m";
	cout << "\033[48;5;117m                                                            \033[48;5;195m  \033[48;5;189m    \033[48;5;117m  \033[48;5;153m  \033[48;5;117m    \033[48;5;189m  \033[48;5;254m    \033[48;5;189m  \033[48;5;117m    \033[48;5;255m          \033[48;5;153m  \033[48;5;117m        \033[48;5;195m  \033[48;5;189m  \033[48;5;117m                        \033[m";
	cout << "\033[48;5;117m            \033[48;5;255m  \033[48;5;189m  \033[48;5;117m                                      \033[48;5;189m      \033[48;5;255m  \033[48;5;254m      \033[48;5;255m  \033[48;5;153m  \033[48;5;117m  \033[48;5;153m  \033[48;5;189m    \033[48;5;153m  \033[48;5;116m  \033[48;5;254m  \033[48;5;255m  \033[48;5;15m  \033[48;5;255m  \033[48;5;254m    \033[48;5;189m  \033[48;5;117m    \033[48;5;153m  \033[48;5;255m      \033[48;5;195m  \033[48;5;117m                      \033[m";
	cout << "\033[48;5;117m        \033[48;5;153m  \033[48;5;255m    \033[48;5;189m  \033[48;5;153m  \033[48;5;117m                                      \033[48;5;153m  \033[48;5;189m  \033[48;5;254m    \033[48;5;255m  \033[48;5;254m    \033[48;5;153m        \033[48;5;255m    \033[48;5;153m                \033[48;5;117m  \033[48;5;153m  \033[48;5;189m  \033[48;5;255m  \033[48;5;189m  \033[48;5;153m  \033[48;5;117m    \033[48;5;153m      \033[48;5;117m              \033[m";
	cout << "\033[48;5;117m        \033[48;5;153m      \033[48;5;189m      \033[48;5;153m  \033[48;5;117m                        \033[48;5;153m  \033[48;5;117m        \033[48;5;153m    \033[48;5;189m  \033[48;5;153m  \033[48;5;189m      \033[48;5;153m  \033[48;5;189m    \033[48;5;254m    \033[48;5;255m  \033[48;5;153m  \033[48;5;117m  \033[48;5;153m  \033[48;5;189m  \033[48;5;117m      \033[48;5;153m  \033[48;5;189m  \033[48;5;254m    \033[48;5;255m  \033[48;5;153m        \033[48;5;255m  \033[48;5;254m    \033[48;5;153m  \033[48;5;117m            \033[m";
	cout << "\033[48;5;153m                                            \033[48;5;254m  \033[48;5;189m  \033[48;5;153m                            \033[48;5;189m  \033[48;5;153m                  \033[48;5;255m  \033[48;5;254m  \033[48;5;189m  \033[48;5;153m      \033[48;5;255m  \033[48;5;189m          \033[48;5;153m    \033[48;5;189m  \033[48;5;153m        \033[m";
	cout << "\033[48;5;153m                                                                  \033[48;5;189m  \033[48;5;153m                                                                  \033[m";
	cout << "\033[48;5;153m                                                                                                                                      \033[m";
	cout << "\033[48;5;153m                                                                                                                                      \033[m";
	cout << "\033[48;5;153m                                                                                    \033[48;5;254m  \033[48;5;153m                                                \033[m";
	cout << "\033[48;5;69m                                                                        \033[48;5;111m    \033[48;5;153m      \033[48;5;152m        \033[48;5;153m  \033[48;5;111m      \033[48;5;69m      \033[48;5;75m  \033[48;5;69m                            \033[m";
	cout << "\033[48;5;69m          \033[48;5;68m  \033[48;5;69m                \033[48;5;68m  \033[48;5;69m              \033[48;5;68m    \033[48;5;69m                    \033[48;5;68m    \033[48;5;69m      \033[48;5;111m        \033[48;5;110m    \033[48;5;111m  \033[48;5;69m          \033[48;5;68m    \033[48;5;69m            \033[48;5;68m  \033[48;5;69m        \033[48;5;68m  \033[48;5;69m    \033[m";
	cout << "\033[48;5;115m  \033[48;5;109m  \033[48;5;247m  \033[48;5;115m    \033[48;5;107m  \033[48;5;115m  \033[48;5;247m  \033[48;5;109m  \033[48;5;115m  \033[48;5;109m  \033[48;5;247m  \033[48;5;109m  \033[48;5;247m  \033[48;5;108m  \033[48;5;247m  \033[48;5;115m  \033[48;5;247m  \033[48;5;115m  \033[48;5;247m  \033[48;5;109m  \033[48;5;247m  \033[48;5;108m    \033[48;5;109m  \033[48;5;247m  \033[48;5;115m      \033[48;5;247m  \033[48;5;115m    \033[48;5;109m  \033[48;5;115m  \033[48;5;108m    \033[48;5;115m  \033[48;5;109m  \033[48;5;115m        \033[48;5;247m  \033[48;5;108m    \033[48;5;115m      \033[48;5;109m    \033[48;5;108m      \033[48;5;247m  \033[48;5;115m      \033[48;5;108m  \033[48;5;115m  \033[48;5;108m    \033[48;5;247m    \033[48;5;115m  \033[48;5;108m  \033[48;5;115m  \033[48;5;247m  \033[m";
	cout << "\033[48;5;150m  \033[48;5;107m  \033[48;5;149m  \033[48;5;150m  \033[48;5;149m    \033[48;5;113m  \033[48;5;107m  \033[48;5;114m  \033[48;5;113m  \033[48;5;107m  \033[48;5;150m  \033[48;5;113m  \033[48;5;150m    \033[48;5;113m  \033[48;5;107m    \033[48;5;150m  \033[48;5;108m  \033[48;5;113m  \033[48;5;107m  \033[48;5;113m  \033[48;5;149m  \033[48;5;107m    \033[48;5;114m  \033[48;5;107m    \033[48;5;113m    \033[48;5;107m  \033[48;5;149m  \033[48;5;107m  \033[48;5;150m    \033[48;5;107m    \033[48;5;149m  \033[48;5;150m  \033[48;5;107m  \033[48;5;113m  \033[48;5;107m  \033[48;5;113m  \033[48;5;149m  \033[48;5;107m    \033[48;5;150m  \033[48;5;114m  \033[48;5;107m  \033[48;5;150m    \033[48;5;149m  \033[48;5;113m  \033[48;5;107m    \033[48;5;113m  \033[48;5;107m  \033[48;5;150m    \033[48;5;113m  \033[48;5;107m      \033[48;5;113m  \033[48;5;149m  \033[48;5;107m  \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";
	cout << "\033[48;5;107m                                                                                                                                      \033[m";

}

void DrawLoaded(_POINT _A[][BOARD_SIZE])
{
	system("Color F0");
	FixConsoleWindow();
	DrawBound();
	DrawBoard(BOARD_SIZE); // Vẽ màn hình game
	DrawGuideGame(3, 35);
	Draw_infor1(70, 3, 28, 13);
	for (int i = 0; i < BOARD_SIZE; i++) {
		for (int j = 0; j < BOARD_SIZE; j++) {
			if (_A[i][j].c == -1) {
				SetColor(4, 15);
				GotoXY(_A[i][j].x, _A[i][j].y);
				cout << "X";
			}
			else if (_A[i][j].c == 1) {
				SetColor(1, 15);
				GotoXY(_A[i][j].x, _A[i][j].y);
				cout << "O";
			}
		}
	}
}
